'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _lib = require('../lib/');

var _lib2 = _interopRequireDefault(_lib);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var srv = _http2.default.createServer(function (req, res) {
  return res.end('1');
});
var srv2 = _http2.default.createServer(function (req, res) {
  return res.end('2');
});

(0, _ava2.default)('it works', function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(t) {
    var url, data, url2, data2;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _lib2.default)(srv);

          case 2:
            url = _context.sent;

            t.ok(/http:\/\/localhost:\d+/.test(url));
            _context.next = 6;
            return (0, _requestPromise2.default)(url);

          case 6:
            data = _context.sent;

            t.same('1', data);

            _context.next = 10;
            return (0, _lib2.default)(srv2);

          case 10:
            url2 = _context.sent;

            t.ok(url2 !== url);
            t.ok(/http:\/\/localhost:\d+/.test(url2));
            _context.next = 15;
            return (0, _requestPromise2.default)(url2);

          case 15:
            data2 = _context.sent;

            t.same('2', data2);

          case 17:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })),
      _this = undefined;
  return function (_x) {
    return ref.apply(_this, arguments);
  };
}());